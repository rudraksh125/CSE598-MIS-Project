__author__ = 'raahulkrsna'import cv2import numpy as np# print cv2.__version__path = ''colorMap = {} #Empty DictonarycolormapFileName = ''img1_Gray = ''img2_Gray = ''# bits = 9colorComb = 'RGB'# Get the Color Combination for particular partition from -255 to 255 from the colormap file.def getColor(partition):    if partition > 13 :        print partition    color_Instance = colorMap[partition-1]    return np.array(color_Instance).astype(np.ndarray)def initializeColorMap():    global bits    global colorComb    index = 0    for line in open(path+colormapFileName):        if(index == 0):            index+=1            content = line.rstrip('\n').split(" ")            # bits = int(content[1].split(":")[1])            bits = pow(2,int(content[5]))            # colorComb = content[0].split(":")[1]            colorComb = content[1]            continue        #     index+=1        else:            content = line.rstrip('\n').split("\t")            key = int(content[0].split(" ")[1])            #Incase colorComb is not RGB, we need to send the current color instance to a method and get the RGB colorinstance.            value = [float(content[1].split("  ")[2]),float(content[1].split("  ")[1]),float(content[1].split("  ")[0])]            colorMap[key] = valuedef computeImageDifferenc():    global path    global colormapFileName    global img1_Gray    global img2_Gray    global bits    #capture frame numbers as input.    path = raw_input("Enter the Path of Folder containing video Files:\n")    path.rstrip('/')    path = path + '/'    print('### All videos would be read from "{0}" directory ###\n'.format(path))    videoFile = raw_input('Enter the video file name <v>: ')    file = path+videoFile    frame1 = raw_input("Enter 1st frame number <f1>: ")    frame2 = raw_input("Enter 2nd frame number <f2>: ")    colormapFileName = raw_input("Enter the color map file name: ")    frame1 = int(frame1)    frame2 = int(frame2)    #To Do: Error Validation    print("\n### Extracting the Grayscale for frame {0} and {1} ###".format(frame1,frame2))    file1Name = videoFile.split('.')[0]+'_'+str(frame1)+'_gray.jpg'    file2Name = videoFile.split('.')[0]+'_'+str(frame2)+'_gray.jpg'    i=0    flag = 0    # Play a video file    cap = cv2.VideoCapture(file)    while(cap.isOpened()):        ret, frame = cap.read()        # Do error validation        i+=1        if(i == frame1):            img1_Gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)            cv2.imwrite(path+file1Name, img1_Gray)            flag+=1        if(i == frame2):            img2_Gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)            cv2.imwrite(path+file2Name, img2_Gray)            flag+=1        if(flag >= 2):            break;    cap.release()    # cv2.destroyAllWindows()    print('### Extraction Done ###')    print('### Extracted Grayscale saves as <{0}> and <{1}> ##'.format(file1Name,file2Name))    choice = raw_input('\nDo you want to visualize the Frames [Y/N]: ')    while choice == 'Y':        print('\n\nSelect one of the option:\n')        print('Press 1 for Frame {0}'.format(frame1))        print('Press 2 for Frame {0}'.format(frame2))        print('Press 3 to move forward')        printFrameChoice = raw_input('\nChoice')        if(printFrameChoice == '1'):            print('### Check out the visualization ###')            cv2.imshow('frame1',img1_Gray)        elif(printFrameChoice == '2'):            print('### Check out the visualization ###')            cv2.imshow('frame2',img2_Gray)        elif(printFrameChoice == '3'):            break    print('\n### Determining the Grayscale difference image ###')    # Difference of two images.    absDiff = cv2.absdiff(img1_Gray, img2_Gray)    cv2.imwrite(path+'grayDiff'+str(frame1)+'_'+str(frame2)+'.jpg', absDiff)    img_diff = cv2.subtract(img1_Gray.astype(np.int16), img2_Gray.astype(np.int16))    print('### Computation of grayscale difference image done ###')    #Get Number of rows and cols    rows,cols = img_diff.shape    # Read file to get number of bits    colorComb = 'RGB'    initializeColorMap()    blankImage = np.zeros((rows,cols,3),np.uint8)    # Put the values to image    for row in range(rows):        bins = np.digitize([index/255.0 for index in img_diff[row]],np.arange(-1,1+2/float(bits),2/float(bits)))        for col in range(cols):            blankImage[row][col] = getColor(bins[col])    print('### Rescaling of grayscale difference image done ###')    cv2.imwrite(path+'colordiff'+str(frame1)+'_'+str(frame2)+'.jpg', blankImage)    print('### Recoloring of Grayscale Difference image done ###')    print('### Check out the visualization ###')    # Show Image    cv2.imshow('GrayDiff', absDiff)    cv2.imshow('Color-Diff', blankImage)    cv2.waitKey(0)    cv2.destroyAllWindows()def startProgram4():    continueProgram = 'Y'    while continueProgram == 'Y':        computeImageDifferenc()        continueProgram = raw_input('\nDo you want to restart the program [Y/N]: ')if __name__ == '__main__':    startProgram4()